{"version":3,"sources":["components/AddCategory.js","helpers/GetGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","className","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","key","GifExpertApp","categories","cat","ReactDOM","render","document","getElementById"],"mappings":"gLAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACZC,mBAAS,IADG,mBACzCC,EADyC,KAC7BC,EAD6B,KAgBhD,OACE,0BAAMC,SAVa,SAACC,GACpBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC7BR,GAAc,SAACS,GAAD,OAAWP,GAAX,mBAA0BO,OACxCN,EAAc,OAMd,yBAAKO,UAAU,cACb,2BACEC,KAAK,OACLD,UAAU,eACVE,MAAOV,EACPW,SApBkB,SAACR,GACzBF,EAAcE,EAAES,OAAOF,a,uBCPdG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEfC,EAFe,0FAE0EC,UAAUH,GAFpF,sBAGFI,MAAMF,GAHJ,cAGfG,EAHe,gBAIEA,EAAKC,OAJP,uBAIbC,EAJa,EAIbA,KAEFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EAC3B,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVjB,kBAcdM,GAdc,4CAAH,sDCEPO,EAAc,SAAC,GAAoB,IAAlBH,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IACnC,OACE,oCACE,yBAAKR,UAAU,0CACb,yBAAKsB,IAAKd,EAAKR,UAAU,eAAeuB,IAAKL,IAC7C,yBAAKlB,UAAU,aACb,wBAAIA,UAAU,cAAckB,OCJzBM,EAAU,SAAC,GAAkB,IAAhBlB,EAAe,EAAfA,SAAe,ECDb,SAACA,GAAc,IAAD,EACdf,mBAAS,CACjCsB,KAAM,GACNY,SAAS,IAH6B,mBACjCC,EADiC,KAC1BC,EAD0B,KAgBxC,OAVAC,qBAAU,WACRvB,EAAQC,GAAUuB,MAAK,SAAAC,GACrBH,EAAS,CACPd,KAAMiB,EACNL,SAAS,SAGZ,CAACnB,IAGGoB,EDb2BK,CAAazB,GAAjCa,EAFyB,EAE/BN,KAAcY,EAFiB,EAEjBA,QAEtB,OACE,oCACE,wBAAIzB,UAAU,aAAaM,GAC3B,6BAECmB,GAAW,uBAAGzB,UAAU,yCAAb,eAEZ,yBAAKA,UAAU,gBAEXmB,EAAOJ,KAAI,SAACC,GAAD,OACT,kBAAC,EAAD,eACEgB,IAAKhB,EAAIC,IACLD,UEMHiB,EAtBM,WAAO,IAAD,EACU1C,mBAAS,CAAC,cADpB,mBACnB2C,EADmB,KACP5C,EADO,KAG1B,OACC,oCACC,wBAAIU,UAAU,QAAd,gBACA,6BAEA,kBAAC,EAAD,CAAaV,cAAeA,IAG3B4C,EAAWnB,KAAI,SAAAoB,GAAG,OACjB,kBAAC,EAAD,CACCH,IAAKG,EACL7B,SAAU6B,SCbhBC,IAASC,OAAO,kBAAC,EAAD,MAAkBC,SAASC,eAAe,U","file":"static/js/main.3cad88be.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types'\n\nexport const AddCategory = ({ setCategories }) => {\n  const [inputValue, setInputValue] = useState('');\n\n  const handleInputChange = (e) => {\n    setInputValue(e.target.value);\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    if (inputValue.trim().length > 2) {\n      setCategories((cats) => [inputValue, ...cats,]);\n      setInputValue('');\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <div className=\"form-group\">\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          value={inputValue}\n          onChange={handleInputChange} />\n      </div>\n    </form>\n  );\n};\n\nAddCategory.propTypes = {\n  setCategories: PropTypes.func.isRequired\n}\n","export const getGifs = async (category) => {\n\n  const url = `https://api.giphy.com/v1/gifs/search?api_key=8Dt0wHvVSB1dSJdbP1LT5Uno152jw5dx&q=${encodeURI(category)}&limit=10`;\n  const resp = await fetch(url);\n  const { data } = await resp.json();\n\n  const gifs = data.map(img => {\n    return {\n      id: img.id,\n      title: img.title,\n      url: img.images?.downsized_medium.url\n    }\n  })\n\n  return gifs;\n}","import React from 'react'\n\nexport const GifGridItem = ({ title, url }) => {\n  return (\n    <>\n      <div className=\"card animate__animated animate__bounce\">\n        <img src={url} className=\"card-img-top\" alt={title} />\n        <div className=\"card-body\">\n          <h5 className=\"card-title\">{title}</h5>\n        </div>\n      </div>\n    </>\n  )\n}\n","import React from 'react';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ({ category }) => {\n\n  const { data: images, loading } = useFetchGifs(category);\n\n  return (\n    <>\n      <h3 className=\"mt-3 mb-2\">{category}</h3>\n      <hr />\n\n      {loading && <p className=\"animate__animated animate__fadeInLeft\">Cargando...</p>}\n\n      <div className=\"card-columns\">\n        {\n          images.map((img) => (\n            <GifGridItem\n              key={img.id}\n              {...img}\n            />\n          ))\n        }\n      </div>\n    </>\n  )\n}","import { useState, useEffect } from \"react\"\nimport { getGifs } from \"../helpers/GetGifs\";\n\nexport const useFetchGifs = (category) => {\n  const [state, setState] = useState({\n    data: [],\n    loading: true\n  });\n\n  useEffect(() => {\n    getGifs(category).then(imgs => {\n      setState({\n        data: imgs,\n        loading: false\n      })\n    })\n  }, [category])\n\n\n  return state;\n}\n","import React, { useState } from 'react';\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nconst GifExpertApp = () => {\n\tconst [categories, setCategories] = useState(['One Punch']);\n\n\treturn (\n\t\t<>\n\t\t\t<h2 className=\"mt-3\">GifExpertApp</h2>\n\t\t\t<hr />\n\n\t\t\t<AddCategory setCategories={setCategories} />\n\n\t\t\t{\n\t\t\t\tcategories.map(cat => (\n\t\t\t\t\t<GifGrid\n\t\t\t\t\t\tkey={cat}\n\t\t\t\t\t\tcategory={cat}\n\t\t\t\t\t/>\n\t\t\t\t))\n\t\t\t}\n\t\t</>\n\t);\n};\n\nexport default GifExpertApp;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport GifExpertApp from './GifExpertApp';\n\nReactDOM.render(<GifExpertApp />, document.getElementById('root'));\n"],"sourceRoot":""}